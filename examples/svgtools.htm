<html>

<head>
    <style>
        #main {
            position: relative;
        }

        #canvas {
            position: absolute;
            top: 0;
            left: 0;
            border: 2px red dashed;

            z-index: 2;
        }

        img {
            width: 800px;
            border: 2px solid blue;

            z-index: 1;
        }
    </style>
</head>

<body style="font-family: Arial, Helvetica, sans-serif;">
    <h2> Original image</h2>

    <input type="file" id="fileInput" accept=".svg">
    <button id="simplify">Simplify</button>
    <button id="optimize">Optimize</button>

    <div id="main">
        <img id="svgImage" />
        <canvas id="canvas"></canvas>
    </div>

    <script type="module">

        import * as ARRAYTOOLS from '../utilities/arraytools.js'
        import * as SVGTOOLS from '../utilities/svgtools.js';
        import * as PATHTOOLS from '../utilities/pathtools.js';

        let obj = {};
        let svgImage = document.querySelector("#svgImage")
        let simplifyError = 0.1;
        // ======================================================================================================================
        // read  the SVG
        function readAndProcessSVG(file) {
            const reader = new FileReader();
            reader.onload = function (e) {
                const svgstring = e.target.result;
                processSVG(svgstring);
            };

            if (typeof file === 'string') {
                fetch(file)
                    .then(response => response.text())
                    .then(svgstring => {
                        processSVG(svgstring);
                    });
            } else {
                reader.readAsText(file);
            }
        }
        // ======================================================================================================================
        function processSVG(svgstring) {
            obj = {};  // clear the object
            simplifyError = 0.1; // reset 

            // show the svgDoc in the image
            const svgImage = document.querySelector("#svgImage");

            svgImage.onload = () => {
                let SVGDoc = SVGTOOLS.SVG2Doc(svgstring);

                // get the main attributes of the svg and add to the object
                Object.assign(obj, SVGTOOLS.getAttributes(SVGDoc));

                // flatten svg  
                SVGDoc = SVGTOOLS.flattenGroups(SVGDoc);

                // converting all elements to path objects, ignoring null elements
                obj.paths = SVGDoc.map(el => SVGTOOLS.elementToPathObject(el)).filter(p => p);

                // create point arrays for all paths.  MaxDistance is the max deviation (smaller= more accurate)
                obj.paths.map(path => path.points = SVGTOOLS.pathtoPointArray(path.d, .1));

                // split the paths into separate paths if any of the point are null  ( move commands)
                obj.paths = PATHTOOLS.splitPaths(obj.paths);

                // update the canvas size to match the image
                const canvas = document.querySelector("#canvas");

                // get the first and last points of each path and add to the path 
                PATHTOOLS.getFirstLast(obj.paths)

                // match the canvas dimensions
                canvas.width = parseFloat(obj.width)
                canvas.height = parseFloat(obj.height)

                // set the canvas size to match the image
                canvas.style.width = svgImage.clientWidth + "px";;
                canvas.style.height = svgImage.clientHeight + "px";


                console.log(obj)
            }
            // convert the svg string to a document element

            svgImage.src = "data:image/svg+xml," + encodeURIComponent(svgstring);;

        }
        //===============================================================================
        // helper function to draw a path on the canvas. 
        let draw = (paths, strokeStyle, lineWidth, dotSize, drawing = true, nondrawing = false) => {

            let ctx = canvas.getContext("2d")
            ctx.clearRect(0.5, 0.5, canvas.width - 1, canvas.height - 1)

            if (nondrawing) {
                ctx.beginPath()
                ctx.strokeStyle = "red"
                paths.forEach(path => {
                    path.points.forEach((point, i) => {
                        if (point == null) return
                        ctx.lineTo(point.x, point.y);
                    })
                })
                ctx.stroke()
            }
            if (drawing) {
                ctx.strokeStyle = strokeStyle
                ctx.lineWidth = lineWidth
                paths.forEach(path => {

                    path.points.forEach((point, i) => {
                        if (point == null) return
                        ctx.beginPath()
                        ctx.arc(point.x, point.y, dotSize, 0, 2 * Math.PI)
                        ctx.stroke()
                    })
                })
                ctx.stroke()
            }
        }



        document.querySelector("#fileInput").addEventListener("change", (e) => readAndProcessSVG(e.target.files[0]))

        document.querySelector("#simplify").addEventListener("click", () => {
            obj.paths.map(path => path.points = PATHTOOLS.simplifyPath(path.points, simplifyError))
            console.log(simplifyError)
            simplifyError *= 2;
            draw(obj.paths, "green", 2, 5, true, true)
        })


        document.querySelector("#optimize").addEventListener("click", () => {
            obj.paths = PATHTOOLS.minimizeMovingDistanceQuick(obj.paths)
            draw(obj.paths, "green", 2, 5, false, true)
        })



        readAndProcessSVG("./test.svg")




    </script>












</body>


</html>